import streamlit as st
import pandas as pd
import os
from pathlib import Path
import sys
from datetime import datetime, timedelta
import ccxt
import time
import numpy as np

st.set_page_config(
    page_title="Data Loader",
    page_icon="üìä",
    layout="wide"
)

# Add project root to Python path
root_path = Path(__file__).parent.parent.parent
sys.path.append(str(root_path))

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data
DATA_DIR = os.path.join(root_path, "data")
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î timeframe ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
TIMEFRAMES = {
    "5m": "5 minutes",
    "15m": "15 minutes", 
    "30m": "30 minutes",
    "1h": "1 hour",
    "1d": "1 day",
    "1w": "1 week",
    "1M": "1 month",
    "3M": "3 months",
    "6M": "6 months"
}

def get_filename(symbol, timeframe, start_date, end_date):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    symbol = symbol.replace('/', '_')
    return f"{symbol}-{timeframe}-{start_date}-{end_date}.csv"

def download_crypto_data(exchange_id, symbols, start_date, end_date, timeframe='1h'):
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å exchange"""
    try:
        exchange = getattr(ccxt, exchange_id)({'enableRateLimit': True})
        start_timestamp = int(datetime.strptime(start_date, '%Y-%m-%d').timestamp() * 1000)
        end_timestamp = int(datetime.strptime(end_date, '%Y-%m-%d').timestamp() * 1000)
        
        all_data = []
        for symbol in symbols:
            st.info(f"‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {symbol} ({TIMEFRAMES[timeframe]})...")
            
            if not exchange.has['fetchOHLCV']:
                st.error(f"‚ö†Ô∏è {exchange_id} ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLCV")
                continue
                
            current_timestamp = start_timestamp
            while current_timestamp < end_timestamp:
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, since=current_timestamp, limit=1000)
                    if not ohlcv:
                        break
                        
                    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    for col in ['open', 'high', 'low', 'close', 'volume']:
                        df[col] = pd.to_numeric(df[col], errors='coerce')
                        if df[col].isna().any():
                            df[col] = df[col].fillna(df[col].mean())
                    
                    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
                    price_cols = ['open', 'high', 'low', 'close']
                    for col in price_cols:
                        mask = (df[col] <= 0)
                        if mask.any():
                            df.loc[mask, col] = df.loc[mask, price_cols].mean(axis=1)
                    
                    df.loc[df['volume'] < 0, 'volume'] = 0
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ OHLC
                    df['high'] = df[['high', 'open', 'close', 'low']].max(axis=1)
                    df['low'] = df[['low', 'open', 'close', 'high']].min(axis=1)
                    df['open'] = df[['open', 'high', 'low']].apply(lambda x: min(max(x['open'], x['low']), x['high']), axis=1)
                    df['close'] = df[['close', 'high', 'low']].apply(lambda x: min(max(x['close'], x['low']), x['high']), axis=1)
                    
                    df['symbol'] = symbol
                    df['timeframe'] = timeframe
                    all_data.append(df)
                    
                    current_timestamp = ohlcv[-1][0] + 1
                    progress = (current_timestamp - start_timestamp) / (end_timestamp - start_timestamp) * 100
                    st.progress(min(progress, 100))
                    time.sleep(exchange.rateLimit / 1000)
                    
                except Exception as e:
                    st.error(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {symbol}: {str(e)}")
                    break
        
        if all_data:
            final_df = pd.concat(all_data, ignore_index=True)
            final_df['timestamp'] = pd.to_datetime(final_df['timestamp'], unit='ms')
            final_df = final_df.sort_values('timestamp').drop_duplicates()
            
            data_ready, message = check_data_quality(final_df)
            if not data_ready:
                st.warning(f"‚ö†Ô∏è {message}")
            
            return final_df
        else:
            st.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
            return None
            
    except Exception as e:
        st.error(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö {exchange_id}: {str(e)}")
        return None

def check_data_quality(df):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    try:
        required_columns = ['timestamp', 'open', 'high', 'low', 'close', 'volume']
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            return False, f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: {', '.join(missing_columns)}"
        
        nan_counts = df[required_columns].isna().sum()
        if nan_counts.any():
            return False, f"‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ NaN ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {', '.join(nan_counts[nan_counts > 0].index)}"
        
        inf_counts = df[required_columns].isin([np.inf, -np.inf]).sum()
        if inf_counts.any():
            return False, f"‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ inf ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {', '.join(inf_counts[inf_counts > 0].index)}"
        
        if len(df) < 100:
            return False, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 100 ‡πÅ‡∏ñ‡∏ß)"
        
        price_cols = ['open', 'high', 'low', 'close']
        for col in price_cols:
            if (df[col] <= 0).any():
                return False, f"‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤ 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {col}"
        
        return True, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ"
        
    except Exception as e:
        return False, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}"

def show_data_info():
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data"""
    st.subheader("üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
    
    if not os.path.exists(DATA_DIR):
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data")
        return
    
    files = [f for f in os.listdir(DATA_DIR) if f.endswith('.csv')]
    if not files:
        st.info("üìÑ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return
    
    for file in files:
        file_path = os.path.join(DATA_DIR, file)
        file_size = os.path.getsize(file_path) / (1024*1024)  # MB
        
        col1, col2, col3 = st.columns([3, 1, 1])
        with col1:
            st.write(f"üìÑ {file}")
        with col2:
            st.write(f"{file_size:.2f} MB")
        with col3:
            if st.button("üóëÔ∏è", key=f"delete_{file}"):
                try:
                    os.remove(file_path)
                    st.success(f"‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå {file} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                    st.rerun()
                except Exception as e:
                    st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}")

def show_data_preview(df):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    st.subheader("üëÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.dataframe(df.head(10), use_container_width=True)
    
    st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.dataframe(df.describe(), use_container_width=True)

# Main UI
def data_loader_ui():
    """UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    st.header("üìä Data Loader")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    show_data_info()
    
    st.markdown("---")
    
    # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    st.subheader("üîÑ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà")
    
    with st.form("data_loader_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            exchange = st.selectbox(
                "üè¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Exchange",
                ["binance", "bybit", "okx"],
                help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å cryptocurrency exchange ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            )
            
            symbols_input = st.text_input(
                "üí± ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ comma)",
                value="BTC/USDT,ETH/USDT",
                help="‡πÉ‡∏™‡πà‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô BTC/USDT,ETH/USDT"
            )
            
            timeframe = st.selectbox(
                "‚è∞ Timeframe",
                list(TIMEFRAMES.keys()),
                index=3,  # default to 1h
                format_func=lambda x: f"{x} ({TIMEFRAMES[x]})"
            )
        
        with col2:
            start_date = st.date_input(
                "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
                value=datetime.now() - timedelta(days=30)
            )
            
            end_date = st.date_input(
                "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î",
                value=datetime.now()
            )
            
            filename_prefix = st.text_input(
                "üìÑ ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)",
                help="‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
            )
        
        submit_button = st.form_submit_button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", type="primary")
    
    # ‡∏¢‡πâ‡∏≤‡∏¢ logic ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å form
    if submit_button:
        if start_date >= end_date:
            st.error("‚ö†Ô∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
        else:
            symbols = [s.strip() for s in symbols_input.split(',') if s.strip()]
            
            if not symbols:
                st.error("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
            else:
                progress_container = st.container()
                
                with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
                    df = download_crypto_data(
                        exchange,
                        symbols,
                        start_date.strftime('%Y-%m-%d'),
                        end_date.strftime('%Y-%m-%d'),
                        timeframe
                    )
                    
                    if df is not None:
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
                        if filename_prefix:
                            filename = f"{filename_prefix}_{get_filename('_'.join(symbols), timeframe, start_date.strftime('%Y%m%d'), end_date.strftime('%Y%m%d'))}"
                        else:
                            filename = get_filename('_'.join(symbols), timeframe, start_date.strftime('%Y%m%d'), end_date.strftime('%Y%m%d'))
                        
                        file_path = os.path.join(DATA_DIR, filename)
                        
                        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
                        df.to_csv(file_path, index=False)
                        
                        st.success(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô: {filename}")
                        st.info(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {len(df):,} ‡πÅ‡∏ñ‡∏ß")
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        show_data_preview(df)
                        
                        # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î (‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å form)
                        csv_data = df.to_csv(index=False)
                        st.download_button(
                            label="üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV",
                            data=csv_data,
                            file_name=filename,
                            mime="text/csv"
                        )

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ UI
data_loader_ui() 
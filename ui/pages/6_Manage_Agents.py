import streamlit as st
import sys
import os
from pathlib import Path
from datetime import datetime

st.set_page_config(
    page_title="Manage Agents",
    page_icon="‚öôÔ∏è",
    layout="wide"
)

# Add project root to Python path
root_path = Path(__file__).parent.parent.parent
sys.path.append(str(root_path))

def get_model_info(model_path):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
    try:
        if os.path.exists(model_path):
            stats = os.stat(model_path)
            return {
                "size": f"{stats.st_size/1024/1024:.2f} MB",
                "modified": datetime.fromtimestamp(stats.st_mtime).strftime("%Y-%m-%d %H:%M:%S"),
                "exists": True
            }
        else:
            return {"exists": False}
    except Exception as e:
        return {"exists": False, "error": str(e)}

def manage_agents_ui():
    """UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ agents"""
    st.header("‚öôÔ∏è Manage Agents")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå models
    models_dir = root_path / "models"
    
    if not models_dir.exists():
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå models")
        st.info("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå models ‡πÉ‡∏´‡∏°‡πà...")
        models_dir.mkdir(exist_ok=True)
        st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå models ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        return
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•
    model_files = list(models_dir.glob("*.zip"))
    
    if not model_files:
        st.info("""
        üìã **‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö**
        
        ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ:
        1. ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå `main.py` ‡∏´‡∏£‡∏∑‡∏≠ `simple_advanced_agent.py`
        2. ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Jupyter Notebooks ‡πÉ‡∏ô `notebooks/`
        3. ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤ Train Agent (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤)
        """)
        return
    
    st.subheader(f"üìÅ ‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• {len(model_files)} ‡πÑ‡∏ü‡∏•‡πå")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•
    for i, model_file in enumerate(model_files):
        with st.expander(f"üìÅ {model_file.name}", expanded=False):
            info = get_model_info(str(model_file))
            
            if info["exists"]:
                col1, col2, col3 = st.columns([2, 1, 1])
                
                with col1:
                    st.write(f"**‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå:** {model_file.name}")
                    st.write(f"**‡∏Ç‡∏ô‡∏≤‡∏î:** {info['size']}")
                    st.write(f"**‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** {info['modified']}")
                
                with col2:
                    if st.button("üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠", key=f"copy_{i}"):
                        st.code(model_file.name)
                
                with col3:
                    if st.button("üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå", key=f"delete_{i}", type="secondary"):
                        try:
                            os.remove(str(model_file))
                            st.success(f"‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå {model_file.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}")
            else:
                st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {info.get('error', 'Unknown error')}")
    
    st.markdown("---")
    
    st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    total_size = sum(os.path.getsize(str(f)) for f in model_files) / 1024 / 1024  # MB
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•", len(model_files))
    
    with col2:
        st.metric("‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏ß‡∏°", f"{total_size:.2f} MB")
    
    with col3:
        if model_files:
            latest_file = max(model_files, key=lambda f: os.path.getmtime(str(f)))
            latest_time = datetime.fromtimestamp(os.path.getmtime(str(latest_file)))
            st.metric("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", latest_time.strftime("%m/%d %H:%M"))
    
    st.markdown("---")
    
    st.subheader("üõ†Ô∏è ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.info("""
        **üîÑ ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**
        
        ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `models/` ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥
        
        ```bash
        # ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        cp -r models/ backup_models/
        
        # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ zip
        zip -r models_backup.zip models/
        ```
        """)
    
    with col2:
        st.info("""
        **üìà ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•:**
        
        - ‡πÉ‡∏ä‡πâ `notebooks/4_agent_evaluation.ipynb`
        - ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤ "Evaluate Performance"
        - ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
        
        **üéØ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
        - ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢ `stable_baselines3`
        - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        """)
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢)
    st.markdown("---")
    st.subheader("‚ö†Ô∏è ‡πÇ‡∏ã‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢")
    
    if st.checkbox("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
        if st.button("üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", type="primary"):
            if st.button("‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", type="secondary"):
                try:
                    deleted_count = 0
                    for model_file in model_files:
                        os.remove(str(model_file))
                        deleted_count += 1
                    st.success(f"‚úÖ ‡∏•‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {deleted_count} ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ UI
manage_agents_ui() 
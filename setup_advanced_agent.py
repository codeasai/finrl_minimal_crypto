#!/usr/bin/env python3
# setup_advanced_agent.py
"""
Setup Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Advanced Crypto Agent
‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
"""

import subprocess
import sys
import os

def install_package(package):
    """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á package ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ pip"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error installing {package}: {e}")
        return False

def check_package(package_name):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ package ‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        __import__(package_name)
        return True
    except ImportError:
        return False

def main():
    print("üöÄ Setting up Advanced Crypto Agent")
    print("=" * 50)
    
    # Core packages ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    core_packages = [
        "pandas>=1.3.0",
        "numpy>=1.21.0", 
        "matplotlib>=3.4.0",
        "yfinance>=0.1.70",
        "torch>=1.9.0",
        "scikit-learn>=1.0.0"
    ]
    
    # FinRL
    finrl_packages = ["finrl"]
    
    # Technical indicators packages
    ta_packages = ["pandas_ta>=0.3.14b"]
    
    print("\nüì¶ Installing core packages...")
    for package in core_packages:
        package_name = package.split(">=")[0].split("==")[0]
        print(f"Installing {package_name}...")
        if not install_package(package):
            print(f"‚ö†Ô∏è Failed to install {package_name}, continuing...")
    
    print("\nü§ñ Installing FinRL...")
    for package in finrl_packages:
        print(f"Installing {package}...")
        if not install_package(package):
            print(f"‚ö†Ô∏è Failed to install {package}")
    
    print("\nüìà Installing Technical Indicators...")
    ta_success = False
    
    # ‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pandas_ta ‡∏Å‡πà‡∏≠‡∏ô
    print("Trying to install pandas_ta...")
    if install_package("pandas_ta"):
        ta_success = True
        print("‚úÖ pandas_ta installed successfully")
    else:
        print("‚ö†Ô∏è pandas_ta installation failed")
        
        # ‡∏ñ‡πâ‡∏≤ pandas_ta ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á TA-Lib
        print("Trying to install TA-Lib...")
        if sys.platform.startswith('win'):
            # Windows
            if install_package("TA-Lib-Binary"):
                ta_success = True
                print("‚úÖ TA-Lib-Binary installed successfully")
        else:
            # Linux/Mac
            if install_package("TA-Lib"):
                ta_success = True
                print("‚úÖ TA-Lib installed successfully")
    
    if not ta_success:
        print("‚ö†Ô∏è No technical indicators library installed.")
        print("üí° The agent will use manual calculations instead.")
    
    print("\nüîç Verifying installation...")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö core packages
    core_check = {
        "pandas": "pandas",
        "numpy": "numpy", 
        "matplotlib": "matplotlib",
        "yfinance": "yfinance",
        "torch": "torch",
        "sklearn": "scikit-learn"
    }
    
    for import_name, display_name in core_check.items():
        if check_package(import_name):
            print(f"‚úÖ {display_name}")
        else:
            print(f"‚ùå {display_name} - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö FinRL
    if check_package("finrl"):
        print("‚úÖ finrl")
    else:
        print("‚ùå finrl - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö technical indicators
    if check_package("pandas_ta"):
        print("‚úÖ pandas_ta")
    elif check_package("talib"):
        print("‚úÖ talib")
    else:
        print("‚ö†Ô∏è No technical indicators library - will use manual calculations")
    
    print("\nüéâ Setup completed!")
    print("\nüìã Next steps:")
    print("1. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: python advanced_crypto_agent.py")
    print("2. ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π README_advanced_agent.md ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    os.makedirs("data", exist_ok=True)
    os.makedirs("advanced_models", exist_ok=True)
    print("\nüìÅ Created necessary directories")

if __name__ == "__main__":
    main() 
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns

def check_data_quality(df, symbol):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    print(f"\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {symbol}")
    print("-" * 50)
    
    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    print("\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:")
    print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(df):,}")
    print(f"‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {df['timestamp'].min()} ‡∏ñ‡∏∂‡∏á {df['timestamp'].max()}")
    print(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {df['timestamp'].diff().mode()[0]}")
    
    # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    required_columns = ['timestamp', 'open', 'high', 'low', 'close', 'volume']
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: {', '.join(missing_columns)}")
    else:
        print("‚úÖ ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
    
    # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ NaN
    nan_counts = df[required_columns].isna().sum()
    if nan_counts.any():
        print(f"‚ùå ‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ NaN ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {', '.join(nan_counts[nan_counts > 0].index)}")
    else:
        print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ NaN")
    
    # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ inf
    inf_counts = df[required_columns].isin([np.inf, -np.inf]).sum()
    if inf_counts.any():
        print(f"‚ùå ‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ inf ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {', '.join(inf_counts[inf_counts > 0].index)}")
    else:
        print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ inf")
    
    # 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
    price_cols = ['open', 'high', 'low', 'close']
    price_issues = []
    for col in price_cols:
        if (df[col] <= 0).any():
            price_issues.append(f"{col}: ‡∏û‡∏ö {len(df[df[col] <= 0])} ‡∏Ñ‡πà‡∏≤ 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏•‡∏ö")
        if df[col].isna().any():
            price_issues.append(f"{col}: ‡∏û‡∏ö {df[col].isna().sum()} ‡∏Ñ‡πà‡∏≤ NaN")
    
    if price_issues:
        print("‚ùå ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤:")
        for issue in price_issues:
            print(f"  - {issue}")
    else:
        print("‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    # 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
    logic_issues = []
    if (df['high'] < df[['open', 'close', 'low']].max(axis=1)).any():
        logic_issues.append("high ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ open, close, ‡∏´‡∏£‡∏∑‡∏≠ low")
    if (df['low'] > df[['open', 'close', 'high']].min(axis=1)).any():
        logic_issues.append("low ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ open, close, ‡∏´‡∏£‡∏∑‡∏≠ high")
    
    if logic_issues:
        print("‚ùå ‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤:")
        for issue in logic_issues:
            print(f"  - {issue}")
    else:
        print("‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    # 7. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö volume
    volume_issues = []
    if (df['volume'] < 0).any():
        volume_issues.append(f"‡∏û‡∏ö {len(df[df['volume'] < 0])} ‡∏Ñ‡πà‡∏≤ volume ‡∏ï‡∏¥‡∏î‡∏•‡∏ö")
    if df['volume'].isna().any():
        volume_issues.append(f"‡∏û‡∏ö {df['volume'].isna().sum()} ‡∏Ñ‡πà‡∏≤ volume ‡πÄ‡∏õ‡πá‡∏ô NaN")
    
    if volume_issues:
        print("‚ùå ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏±‡∏ö volume:")
        for issue in volume_issues:
            print(f"  - {issue}")
    else:
        print("‚úÖ volume ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    # 8. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    time_diff = df['timestamp'].diff()
    expected_diff = time_diff.mode()[0]
    gaps = time_diff[time_diff != expected_diff]
    
    if not gaps.empty:
        print(f"‚ö†Ô∏è ‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(gaps)} ‡∏à‡∏∏‡∏î")
        print("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á:")
        for i, (idx, diff) in enumerate(gaps.head(3).items()):
            print(f"  - {df.loc[idx-1, 'timestamp']} ‡∏ñ‡∏∂‡∏á {df.loc[idx, 'timestamp']} (‡∏´‡πà‡∏≤‡∏á {diff})")
    else:
        print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á")
    
    # 9. ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    print("\nüìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:")
    print(df[price_cols + ['volume']].describe())
    
    return {
        'rows': len(df),
        'start_date': df['timestamp'].min(),
        'end_date': df['timestamp'].max(),
        'frequency': df['timestamp'].diff().mode()[0],
        'has_issues': bool(price_issues or logic_issues or volume_issues)
    }

def main():
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á 3 ‡πÑ‡∏ü‡∏•‡πå
    files = [
        'data/BTC_USD-1d-20230601-20250609.csv',
        'data/BTC_USDT-5m-20250511-20250610.csv',
        'data/ADA_USDT-1d-20250511-20250610.csv'
    ]
    
    results = {}
    for file in files:
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            df = pd.read_csv(file)
            
            # ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô datetime
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            symbol = file.split('/')[-1].split('-')[0]
            results[symbol] = check_data_quality(df, symbol)
            
        except Exception as e:
            print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö {file}: {str(e)}")
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    print("\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
    print("-" * 50)
    for symbol, result in results.items():
        print(f"\n{symbol}:")
        print(f"  - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {result['rows']:,} ‡πÅ‡∏ñ‡∏ß")
        print(f"  - ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {result['start_date']} ‡∏ñ‡∏∂‡∏á {result['end_date']}")
        print(f"  - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {result['frequency']}")
        print(f"  - ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {'‚ùå' if result['has_issues'] else '‚úÖ'}")

if __name__ == "__main__":
    main() 
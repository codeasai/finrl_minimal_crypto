# test_sac_results.py - ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå SAC Agent ‡πÅ‡∏ö‡∏ö Interactive
import pickle
import os
from datetime import datetime
import numpy as np
from stable_baselines3 import SAC
import pandas as pd

def get_available_agents():
    """‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå SAC agents ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
    sac_dir = "agents/sac"
    
    if not os.path.exists(sac_dir):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö directory agents/sac")
        return []
    
    agents_info = []
    
    # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå .zip ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô SAC models
    all_files = os.listdir(sac_dir)
    zip_files = [f for f in all_files if f.endswith('.zip')]
    info_files = [f for f in all_files if f.endswith('_info.pkl')]
    
    print(f"üîç ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .zip: {len(zip_files)} ‡πÑ‡∏ü‡∏•‡πå")
    print(f"üîç ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå _info.pkl: {len(info_files)} ‡πÑ‡∏ü‡∏•‡πå")
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ _info.pkl
    processed_models = set()
    
    for info_file in info_files:
        try:
            model_name = info_file.replace('_info.pkl', '')
            zip_file = f"{model_name}.zip"
            
            info_path = os.path.join(sac_dir, info_file)
            zip_path = os.path.join(sac_dir, zip_file)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå info.pkl
            info_size = os.path.getsize(info_path)
            if info_size == 0:
                print(f"‚ö†Ô∏è  ‡πÑ‡∏ü‡∏•‡πå {info_file} ‡πÄ‡∏™‡∏µ‡∏¢ (‡∏Ç‡∏ô‡∏≤‡∏î 0 bytes)")
                continue
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå .zip ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not os.path.exists(zip_path):
                print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {zip_file} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {info_file}")
                continue
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å info.pkl
            with open(info_path, 'rb') as f:
                agent_info = pickle.load(f)
            
            file_size = os.path.getsize(zip_path) / (1024*1024)  # MB
            mod_time = datetime.fromtimestamp(os.path.getmtime(zip_path))
            
            agents_info.append({
                'file': info_file,
                'model_name': model_name,
                'info': agent_info,
                'size_mb': file_size,
                'modified': mod_time,
                'has_info': True
            })
            
            processed_models.add(model_name)
            print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {model_name}")
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {info_file}: {e}")
            continue
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå .zip ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ _info.pkl
    for zip_file in zip_files:
        model_name = zip_file.replace('.zip', '')
        
        if model_name in processed_models:
            continue  # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        
        try:
            zip_path = os.path.join(sac_dir, zip_file)
            file_size = os.path.getsize(zip_path) / (1024*1024)  # MB
            mod_time = datetime.fromtimestamp(os.path.getmtime(zip_path))
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            basic_info = {
                'model_name': model_name,
                'algorithm': 'SAC',
                'created_date': mod_time.strftime('%Y-%m-%dT%H:%M:%S'),
                'crypto_symbols': ['Unknown']
            }
            
            agents_info.append({
                'file': f"{model_name}_info.pkl (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå)",
                'model_name': model_name,
                'info': basic_info,
                'size_mb': file_size,
                'modified': mod_time,
                'has_info': False
            })
            
            print(f"‚ö†Ô∏è  ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ info: {model_name}")
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {zip_file}: {e}")
            continue
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà modified (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
    agents_info.sort(key=lambda x: x['modified'], reverse=True)
    
    return agents_info

def display_agents_list(agents_info):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ agents ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
    print("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ SAC Agents ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
    print("=" * 70)
    
    for i, agent in enumerate(agents_info, 1):
        info = agent['info']
        status_icon = "‚úÖ" if agent['has_info'] else "‚ö†Ô∏è"
        
        print(f"{i:2d}. {status_icon} {agent['model_name'][:35]}{'...' if len(agent['model_name']) > 35 else ''}")
        print(f"    üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {agent['modified'].strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"    üíæ ‡∏Ç‡∏ô‡∏≤‡∏î: {agent['size_mb']:.1f} MB")
        print(f"    ü§ñ Algorithm: {info.get('algorithm', 'N/A')}")
        print(f"    üìà Symbols: {info.get('crypto_symbols', 'N/A')}")
        if not agent['has_info']:
            print(f"    üìÑ Info: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
        print()

def get_user_choice(max_choice):
    """‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    while True:
        try:
            print(f"üìù ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å agent ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π (1-{max_choice}) ‡∏´‡∏£‡∏∑‡∏≠ 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å:")
            choice = input("‚û§ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ").strip()
            
            if choice == '0':
                return 0
            
            choice_num = int(choice)
            if 1 <= choice_num <= max_choice:
                return choice_num
            else:
                print(f"‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-{max_choice}")
                
        except ValueError:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        except KeyboardInterrupt:
            print("\nüëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
            return 0

def display_agent_details(agent):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á agent ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
    info = agent['info']
    model_name = agent['model_name']
    has_info = agent['has_info']
    
    print("\n" + "=" * 70)
    print(f"üîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î SAC Agent: {model_name}")
    if not has_info:
        print("‚ö†Ô∏è  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
    print("=" * 70)
    
    print("\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:")
    print("-" * 40)
    print(f"üî§ ‡∏ä‡∏∑‡πà‡∏≠ Model: {info.get('model_name', model_name)}")
    print(f"ü§ñ Algorithm: {info.get('algorithm', 'N/A')}")
    print(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: {info.get('created_date', 'N/A')}")
    print(f"üìÖ Modified: {agent['modified'].strftime('%Y-%m-%d %H:%M:%S')}")
    
    if has_info:
        print(f"üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${info.get('initial_amount', 0):,}")
        print(f"üí∏ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: {info.get('transaction_cost_pct', 0)*100:.3f}%")
    print(f"üìà ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå: {info.get('crypto_symbols', 'N/A')}")
    
    if has_info and 'train_data_shape' in info and 'test_data_shape' in info:
        print(f"\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å:")
        print("-" * 40)
        print(f"üèãÔ∏è  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Training: {info['train_data_shape'][0]:,} ‡πÅ‡∏ñ‡∏ß")
        print(f"üß™ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Testing: {info['test_data_shape'][0]:,} ‡πÅ‡∏ñ‡∏ß")
        
        if 'train_date_range' in info and 'test_date_range' in info:
            print(f"üìÖ ‡∏ä‡πà‡∏ß‡∏á‡∏ù‡∏∂‡∏Å: {info['train_date_range']['start'][:10]} ‡∏ñ‡∏∂‡∏á {info['train_date_range']['end'][:10]}")
            print(f"üìÖ ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {info['test_date_range']['start'][:10]} ‡∏ñ‡∏∂‡∏á {info['test_date_range']['end'][:10]}")
    
    if has_info and 'indicators' in info:
        print(f"\nüìà Technical Indicators ({len(info['indicators'])} ‡∏ï‡∏±‡∏ß):")
        print("-" * 40)
        for i, indicator in enumerate(info['indicators'], 1):
            print(f"{i:2d}. {indicator}")
    
    print(f"\nüíæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå:")
    print("-" * 40)
    print(f"üì¶ Model: {model_name}.zip ({agent['size_mb']:.1f} MB)")
    
    if has_info:
        print(f"üìÑ Info: {agent['file']} ({os.path.getsize(os.path.join('agents/sac', agent['file']))} bytes)")
    else:
        print(f"üìÑ Info: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ info
    if has_info and 'hyperparameters' in info:
        print(f"\n‚öôÔ∏è  Hyperparameters:")
        print("-" * 40)
        hyperparams = info['hyperparameters']
        important_params = ['learning_rate', 'buffer_size', 'batch_size', 'total_timesteps', 'ent_coef']
        
        for param in important_params:
            if param in hyperparams:
                value = hyperparams[param]
                if isinstance(value, float) and value < 1:
                    print(f"  {param}: {value:.6f}")
                elif isinstance(value, int):
                    print(f"  {param}: {value:,}")
                else:
                    print(f"  {param}: {value}")
    
    print(f"\n‚úÖ SAC Agent ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    print("üöÄ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢:")
    print(f"   model = SAC.load('agents/sac/{model_name}.zip')")
    
    if not has_info:
        print("\nüí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:")
        print("   - ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå _info.pkl")
        print("   - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô model ‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå SAC Agent ‡πÅ‡∏ö‡∏ö Interactive")
    print("=" * 70)
    
    # ‡∏´‡∏≤ agents ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    agents_info = get_available_agents()
    
    if not agents_info:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SAC agents ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        return
    
    print(f"üéØ ‡∏û‡∏ö SAC Agents ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(agents_info)} ‡∏ï‡∏±‡∏ß")
    
    while True:
        print("\n")
        display_agents_list(agents_info)
        
        choice = get_user_choice(len(agents_info))
        
        if choice == 0:
            print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
            break
        
        selected_agent = agents_info[choice - 1]
        display_agent_details(selected_agent)
        
        # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π agent ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏°
        print(f"\n" + "‚îÄ" * 70)
        while True:
            continue_choice = input("üîÑ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π agent ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏°? (y/n): ").strip().lower()
            if continue_choice in ['y', 'yes', '‡πÉ‡∏ä‡πà', '']:
                break
            elif continue_choice in ['n', 'no', '‡πÑ‡∏°‡πà', '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà']:
                print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
                return
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö y ‡∏´‡∏£‡∏∑‡∏≠ n")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        print("üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå agents/sac") 
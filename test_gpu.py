import torch
import sys
import os
from pathlib import Path
import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Add project root to Python path
root_path = Path(__file__).parent
sys.path.append(str(root_path))

# Import FinRL modules
from finrl.meta.preprocessor.preprocessors import FeatureEngineer
from finrl.meta.env_stock_trading.env_stocktrading import StockTradingEnv
from finrl.agents.stablebaselines3.models import DRLAgent
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv

def setup_cuda():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CUDA ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô GPU"""
    try:
        if torch.cuda.is_available():
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ device ‡πÄ‡∏õ‡πá‡∏ô CUDA
            device = torch.device("cuda")
            # ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ GPU
            torch.cuda.empty_cache()
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default tensor type ‡πÄ‡∏õ‡πá‡∏ô float32 ‡∏ö‡∏ô CUDA
            torch.set_default_tensor_type('torch.cuda.FloatTensor')
            return device
        else:
            return torch.device("cpu")
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CUDA: {str(e)}")
        return torch.device("cpu")

def calculate_technical_indicators(df):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì technical indicators"""
    try:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì SMA
        df['sma_20'] = df.groupby('tic')['close'].transform(lambda x: x.rolling(window=20).mean())
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA
        df['ema_20'] = df.groupby('tic')['close'].transform(lambda x: x.ewm(span=20, adjust=False).mean())
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì RSI
        def calculate_rsi(data, periods=14):
            delta = data.diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=periods).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=periods).mean()
            rs = gain / loss
            return 100 - (100 / (1 + rs))
        
        df['rsi_14'] = df.groupby('tic')['close'].transform(calculate_rsi)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° features ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        df['macd'] = df.groupby('tic')['close'].transform(lambda x: x.ewm(span=12, adjust=False).mean() - x.ewm(span=26, adjust=False).mean())
        df['macd_signal'] = df.groupby('tic')['macd'].transform(lambda x: x.ewm(span=9, adjust=False).mean())
        df['macd_hist'] = df['macd'] - df['macd_signal']
        
        # Bollinger Bands
        df['bb_middle'] = df.groupby('tic')['close'].transform(lambda x: x.rolling(window=20).mean())
        df['bb_std'] = df.groupby('tic')['close'].transform(lambda x: x.rolling(window=20).std())
        df['bb_upper'] = df['bb_middle'] + (df['bb_std'] * 2)
        df['bb_lower'] = df['bb_middle'] - (df['bb_std'] * 2)
        
        # Momentum
        df['momentum'] = df.groupby('tic')['close'].transform(lambda x: x.pct_change(periods=10))
        
        # Volatility
        df['volatility'] = df.groupby('tic')['close'].transform(lambda x: x.rolling(window=20).std())
        
        # Volume indicators
        df['volume_sma'] = df.groupby('tic')['volume'].transform(lambda x: x.rolling(window=20).mean())
        df['volume_ratio'] = df['volume'] / df['volume_sma']
        
        return df
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì technical indicators: {str(e)}")
        return df

def normalize_data(df):
    """Normalize ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ NaN"""
    try:
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ normalize
        price_cols = ['open', 'high', 'low', 'close']
        volume_cols = ['volume']
        tech_cols = [col for col in df.columns if col not in ['date', 'tic'] + price_cols + volume_cols]
        
        # Normalize ‡∏£‡∏≤‡∏Ñ‡∏≤
        for col in price_cols:
            df[col] = df.groupby('tic')[col].transform(lambda x: (x - x.mean()) / x.std())
        
        # Normalize volume
        for col in volume_cols:
            df[col] = df.groupby('tic')[col].transform(lambda x: (x - x.mean()) / x.std())
        
        # Normalize technical indicators
        for col in tech_cols:
            df[col] = df.groupby('tic')[col].transform(lambda x: (x - x.mean()) / x.std())
        
        # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤ NaN ‡∏î‡πâ‡∏ß‡∏¢ 0
        df = df.fillna(0)
        
        return df
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ normalize ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
        return df

def test_gpu_availability():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô GPU"""
    print("\n=== üéÆ GPU Availability Test ===")
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CUDA
        cuda_available = torch.cuda.is_available()
        print(f"\n1. CUDA Available: {'‚úÖ' if cuda_available else '‚ùå'}")
        
        if cuda_available:
            # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô GPU
            device_count = torch.cuda.device_count()
            print(f"\n2. Number of GPUs: {device_count}")
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ GPU
            print("\n3. GPU Information:")
            for i in range(device_count):
                print(f"\n   GPU {i+1}:")
                print(f"   - Name: {torch.cuda.get_device_name(i)}")
                print(f"   - Memory Allocated: {torch.cuda.memory_allocated(i)/1024**2:.2f} MB")
                print(f"   - Memory Reserved: {torch.cuda.memory_reserved(i)/1024**2:.2f} MB")
            
            # CUDA Version
            print(f"\n4. CUDA Version: {torch.version.cuda}")
            print(f"5. PyTorch Version: {torch.__version__}")
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CUDA
            device = setup_cuda()
            print(f"\n6. Using device: {device}")
        else:
            print("\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö GPU ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
            print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á CUDA")
            print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á GPU drivers")
            print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ GPU")
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GPU: {str(e)}")

def test_tensor_operations():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Tensor ‡∏ö‡∏ô GPU"""
    print("\n=== üî¢ Tensor Operations Test ===")
    
    try:
        if not torch.cuda.is_available():
            print("‚ùå ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Tensor Operations ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö GPU")
            return
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CUDA
        device = setup_cuda()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á tensor ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
        size = 1000
        print(f"\n1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Tensor ‡∏Ç‡∏ô‡∏≤‡∏î {size}x{size}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ô CPU
        start_time = datetime.now()
        cpu_tensor = torch.randn(size, size)
        cpu_time = (datetime.now() - start_time).total_seconds()
        print(f"   - CPU Time: {cpu_time:.4f} seconds")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ô GPU
        start_time = datetime.now()
        gpu_tensor = torch.randn(size, size, device=device)
        gpu_time = (datetime.now() - start_time).total_seconds()
        print(f"   - GPU Time: {gpu_time:.4f} seconds")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        print("\n2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Matrix Multiplication")
        
        # ‡∏ö‡∏ô CPU
        start_time = datetime.now()
        cpu_result = torch.matmul(cpu_tensor, cpu_tensor)
        cpu_time = (datetime.now() - start_time).total_seconds()
        print(f"   - CPU Time: {cpu_time:.4f} seconds")
        
        # ‡∏ö‡∏ô GPU
        start_time = datetime.now()
        gpu_result = torch.matmul(gpu_tensor, gpu_tensor)
        gpu_time = (datetime.now() - start_time).total_seconds()
        print(f"   - GPU Time: {gpu_time:.4f} seconds")
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        speedup = cpu_time / gpu_time if gpu_time > 0 else 0
        print(f"\n3. GPU Speedup: {speedup:.2f}x")
        
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Tensor Operations: {str(e)}")

def test_stable_baselines3():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Stable-Baselines3"""
    print("\n=== ü§ñ Stable-Baselines3 Test ===")
    
    try:
        if not torch.cuda.is_available():
            print("‚ùå ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Stable-Baselines3 ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö GPU")
            return
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CUDA
        device = setup_cuda()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
        print("\n1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á")
        df = pd.DataFrame({
            'date': pd.date_range(start='2020-01-01', periods=100),
            'tic': ['BTC'] * 100,
            'open': np.random.randn(100) + 100,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            'high': np.random.randn(100) + 100,
            'low': np.random.randn(100) + 100,
            'close': np.random.randn(100) + 100,
            'volume': np.random.randn(100) + 1000  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        })
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì technical indicators
        df = calculate_technical_indicators(df)
        
        # Normalize ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df = normalize_data(df)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î technical indicators ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
        tech_indicator_list = [
            'sma_20', 'ema_20', 'rsi_14', 'macd', 'macd_signal', 'macd_hist',
            'bb_middle', 'bb_upper', 'bb_lower', 'momentum', 'volatility',
            'volume_ratio'
        ]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á environment ‡∏à‡∏≥‡∏•‡∏≠‡∏á
        print("\n2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Environment ‡∏à‡∏≥‡∏•‡∏≠‡∏á")
        env = DummyVecEnv([lambda: StockTradingEnv(
            df=df,
            hmax=100,
            initial_amount=10000,
            num_stock_shares=[0],
            buy_cost_pct=[0.001],
            sell_cost_pct=[0.001],
            state_space=15,  # 5 (OHLCV) + 10 (technical indicators)
            stock_dim=1,
            tech_indicator_list=tech_indicator_list,
            action_space=1,
            reward_scaling=1e-4
        )])
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á agent
        print("\n3. ‡∏™‡∏£‡πâ‡∏≤‡∏á PPO Agent")
        agent = DRLAgent(env=env)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
        PPO_PARAMS = {
            'learning_rate': 5e-5,  # ‡∏•‡∏î learning rate ‡∏•‡∏á‡∏≠‡∏µ‡∏Å
            'n_steps': 2048,
            'batch_size': 128,  # ‡∏•‡∏î batch size
            'n_epochs': 20,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô epochs
            'gamma': 0.99,
            'gae_lambda': 0.95,
            'clip_range': 0.1,  # ‡∏•‡∏î clip range
            'max_grad_norm': 0.3,  # ‡∏•‡∏î max gradient norm
            'ent_coef': 0.005,  # ‡∏•‡∏î entropy coefficient
            'vf_coef': 0.5,
            'target_kl': 0.01,  # ‡∏•‡∏î target KL divergence
            'device': device  # ‡∏£‡∏∞‡∏ö‡∏∏ device ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
        print("\n4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• PPO")
        model = agent.get_model("ppo", model_kwargs=PPO_PARAMS)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô
        print("\n5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô")
        start_time = datetime.now()
        model.learn(total_timesteps=1000)
        training_time = (datetime.now() - start_time).total_seconds()
        print(f"   - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô: {training_time:.2f} seconds")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö device ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
        print(f"\n6. Device ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {model.device}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Stable-Baselines3: {str(e)}")

def test_finrl():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö FinRL"""
    print("\n=== üìà FinRL Test ===")
    
    try:
        if not torch.cuda.is_available():
            print("‚ùå ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö FinRL ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö GPU")
            return
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CUDA
        device = setup_cuda()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
        print("\n1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á")
        df = pd.DataFrame({
            'date': pd.date_range(start='2020-01-01', periods=100),
            'tic': ['BTC'] * 100,
            'open': np.random.randn(100) + 100,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            'high': np.random.randn(100) + 100,
            'low': np.random.randn(100) + 100,
            'close': np.random.randn(100) + 100,
            'volume': np.random.randn(100) + 1000  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        })
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì technical indicators
        print("\n2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Technical Indicators")
        df = calculate_technical_indicators(df)
        
        # Normalize ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df = normalize_data(df)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î technical indicators ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
        tech_indicator_list = [
            'sma_20', 'ema_20', 'rsi_14', 'macd', 'macd_signal', 'macd_hist',
            'bb_middle', 'bb_upper', 'bb_lower', 'momentum', 'volatility',
            'volume_ratio'
        ]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á environment
        print("\n3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Trading Environment")
        env = StockTradingEnv(
            df=df,
            hmax=100,
            initial_amount=10000,
            num_stock_shares=[0],
            buy_cost_pct=[0.001],
            sell_cost_pct=[0.001],
            state_space=15,  # 5 (OHLCV) + 10 (technical indicators)
            stock_dim=1,
            tech_indicator_list=tech_indicator_list,
            action_space=1,
            reward_scaling=1e-4
        )
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á agent
        print("\n4. ‡∏™‡∏£‡πâ‡∏≤‡∏á DRL Agent")
        agent = DRLAgent(env=env)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô
        print("\n5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô")
        start_time = datetime.now()
        model = agent.get_model("ppo", model_kwargs={
            'learning_rate': 5e-5,  # ‡∏•‡∏î learning rate ‡∏•‡∏á‡∏≠‡∏µ‡∏Å
            'n_steps': 2048,
            'batch_size': 128,  # ‡∏•‡∏î batch size
            'n_epochs': 20,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô epochs
            'gamma': 0.99,
            'gae_lambda': 0.95,
            'clip_range': 0.1,  # ‡∏•‡∏î clip range
            'max_grad_norm': 0.3,  # ‡∏•‡∏î max gradient norm
            'ent_coef': 0.005,  # ‡∏•‡∏î entropy coefficient
            'vf_coef': 0.5,
            'target_kl': 0.01,  # ‡∏•‡∏î target KL divergence
            'device': device  # ‡∏£‡∏∞‡∏ö‡∏∏ device ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
        })
        model.learn(total_timesteps=1000)
        training_time = (datetime.now() - start_time).total_seconds()
        print(f"   - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô: {training_time:.2f} seconds")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        print("\n6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
        df_account_value, df_actions = agent.DRL_prediction(model=model, environment=env)
        print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {len(df_account_value)}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö FinRL: {str(e)}")

def test_memory_management():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ GPU"""
    print("\n=== üíæ GPU Memory Management Test ===")
    
    try:
        if not torch.cuda.is_available():
            print("‚ùå ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Memory Management ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö GPU")
            return
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CUDA
        device = setup_cuda()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        initial_memory = torch.cuda.memory_allocated()
        print(f"\n1. ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {initial_memory/1024**2:.2f} MB")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á tensor ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
        print("\n2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Tensor ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà")
        large_tensor = torch.randn(1000, 1000, device=device)
        memory_after_alloc = torch.cuda.memory_allocated()
        print(f"   - ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Tensor: {memory_after_alloc/1024**2:.2f} MB")
        
        # ‡∏•‡∏ö tensor
        print("\n3. ‡∏•‡∏ö Tensor")
        del large_tensor
        torch.cuda.empty_cache()
        memory_after_delete = torch.cuda.memory_allocated()
        print(f"   - ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö Tensor: {memory_after_delete/1024**2:.2f} MB")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
        memory_recovered = memory_after_alloc - memory_after_delete
        print(f"\n4. ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏°‡∏≤: {memory_recovered/1024**2:.2f} MB")
        
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Memory Management: {str(e)}")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    try:
        print("=== üöÄ Starting GPU Test Suite ===")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CUDA
        device = setup_cuda()
        print(f"\nUsing device: {device}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô GPU
        test_gpu_availability()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Tensor
        test_tensor_operations()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Stable-Baselines3
        test_stable_baselines3()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö FinRL
        test_finrl()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
        test_memory_management()
        
        print("\n=== ‚úÖ GPU Test Suite Completed ===")
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {str(e)}")

if __name__ == "__main__":
    main() 